# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401
from swagger_server.models.thres import Thres
from swagger_server.models.image import Image
from swagger_server.models.different_modes import DifferentModes
from swagger_server.models.base_model_ import Model
from swagger_server import util


class RequestParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nms_thres: Thres=None, conf_thres: Thres=None, image_data: List[Image]=None, mode: DifferentModes=None, network_id: int=None):  # noqa: E501
        """RequestParameters - a model defined in Swagger

        :param nms_thres: The nms_thres of this RequestParameters.  # noqa: E501
        :type nms_thres: Thres
        :param conf_thres: The conf_thres of this RequestParameters.  # noqa: E501
        :type conf_thres: Thres
        :param image_data: The image_data of this RequestParameters.  # noqa: E501
        :type image_data: List[Image]
        :param mode: The mode of this RequestParameters.  # noqa: E501
        :type mode: DifferentModes
        :param network_id: The network_id of this RequestParameters.  # noqa: E501
        :type network_id: int
        """
        self.swagger_types = {
            'nms_thres': Thres,
            'conf_thres': Thres,
            'image_data': List[Image],
            'mode': DifferentModes,
            'network_id': int
        }

        self.attribute_map = {
            'nms_thres': 'nmsThres',
            'conf_thres': 'confThres',
            'image_data': 'imageData',
            'mode': 'mode',
            'network_id': 'networkID'
        }

        self._nms_thres = nms_thres
        self._conf_thres = conf_thres
        self._image_data = image_data
        self._mode = mode
        self._network_id = network_id

    @classmethod
    def from_dict(cls, dikt) -> 'RequestParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The requestParameters of this RequestParameters.  # noqa: E501
        :rtype: RequestParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nms_thres(self) -> Thres:
        """Gets the nms_thres of this RequestParameters.


        :return: The nms_thres of this RequestParameters.
        :rtype: Thres
        """
        return self._nms_thres

    @nms_thres.setter
    def nms_thres(self, nms_thres: Thres):
        """Sets the nms_thres of this RequestParameters.


        :param nms_thres: The nms_thres of this RequestParameters.
        :type nms_thres: Thres
        """

        self._nms_thres = nms_thres

    @property
    def conf_thres(self) -> Thres:
        """Gets the conf_thres of this RequestParameters.


        :return: The conf_thres of this RequestParameters.
        :rtype: Thres
        """
        return self._conf_thres

    @conf_thres.setter
    def conf_thres(self, conf_thres: Thres):
        """Sets the conf_thres of this RequestParameters.


        :param conf_thres: The conf_thres of this RequestParameters.
        :type conf_thres: Thres
        """

        self._conf_thres = conf_thres

    @property
    def image_data(self) -> List[Image]:
        """Gets the image_data of this RequestParameters.


        :return: The image_data of this RequestParameters.
        :rtype: List[Image]
        """
        return self._image_data

    @image_data.setter
    def image_data(self, image_data: List[Image]):
        """Sets the image_data of this RequestParameters.


        :param image_data: The image_data of this RequestParameters.
        :type image_data: List[Image]
        """
        if image_data is None:
            raise ValueError("Invalid value for `image_data`, must not be `None`")  # noqa: E501

        self._image_data = image_data

    @property
    def mode(self) -> DifferentModes:
        """Gets the mode of this RequestParameters.


        :return: The mode of this RequestParameters.
        :rtype: DifferentModes
        """
        return self._mode

    @mode.setter
    def mode(self, mode: DifferentModes):
        """Sets the mode of this RequestParameters.


        :param mode: The mode of this RequestParameters.
        :type mode: DifferentModes
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def network_id(self) -> int:
        """Gets the network_id of this RequestParameters.


        :return: The network_id of this RequestParameters.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id: int):
        """Sets the network_id of this RequestParameters.


        :param network_id: The network_id of this RequestParameters.
        :type network_id: int
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")  # noqa: E501

        self._network_id = network_id
